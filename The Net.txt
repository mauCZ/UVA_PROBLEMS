#include <iostream>
#include <vector>
#include <fstream>
#include <algorithm>
#include <map>
#include <set>
#include <unordered_map>
#include <iomanip>
#include <math.h>
#include <queue>
#include <stack>
#include <bitset>
#include <sstream>
using namespace std;
 
#define pb push_back
#define f first
#define s second
#define endl '\n'
#define EPS 1e-9
#define PI acos(-1)
 
using ll = long long;
using pll = pair<ll,ll>;
using ii = pair<ll,ll>;
using iii = pair<pair<int,int>,int>;
using viii = vector<iii>;
using vi = vector<int>;
using vii = vector<ii>;
using vll = vector<ll>;
using ui = unsigned int;

ii padre[500];

void bfs(int ini,map<int,vector<int>>& grafo){
	queue<int> q;
	for(int i =0;i<500;i++){
		padre[i] = {-1,-1};
	}
	//distancia,padre
	padre[ini] = {0,ini};
	q.push(ini);
	int act,vecino;
	while(!q.empty()){
		act = q.front();
		q.pop();
		
		for(int i =0;i<grafo[act].size();i++){
			vecino = grafo[act][i];
			if(padre[vecino].f == -1){
				q.push(vecino);
				padre[vecino].f  = 1+ padre[act].f;
				padre[vecino].s = act;
			}
			else if(padre[vecino].f == 1+padre[act].f){
				if(padre[vecino].s > act){
					padre[vecino].s = act;
				}
			}
		}
	}
}

int main() {
    ofstream out("output.txt");
    ios_base::sync_with_stdio(false);
	
	int n,m;
	char basura;
	
	while(cin>>n){
		cin.ignore();
		string datos;
		map<int,vector<int>> grafo;
		int val,vec;
		for(int i =0;i<n;i++){
			getline(cin,datos);
			istringstream str(datos);
			str>>val;
			str>>basura;
			while(str>>vec){
				grafo[val].push_back(vec);
				str>>basura;
			}
		}
		cin>>m;
		int a,b;
		vector<int> camino;
		cout<<"-----"<<endl;
		for(int i =0;i<m;i++){
			cin>>a>>b;
			bfs(a,grafo);
			
			if(padre[b].f == -1){
				cout<<"connection impossible"<<endl;
			}
			else{
				camino.clear();
				while(b != padre[b].s){
					camino.push_back(b);
					b = padre[b].s;
				}
				camino.push_back(b);
				reverse(camino.begin(),camino.end());
				for(int k =0;k<camino.size();k++){
					if(k == 0) cout<<camino[k];
					else cout<<" "<<camino[k];
				}
				cout<<endl;
			}
			/*for(int k =1;k<=n;k++){
				cout<<k<<endl;
				cout<<k<<"==>"<<padre[k].f<<" "<<padre[k].s<<endl;
			}*/
			
		}
		
	}	
	
    return 0;
}   

