#include <iostream>
#include <vector>
#include <fstream>
#include <algorithm>
#include <map>
#include <set>
#include <unordered_map>
#include <iomanip>
#include <math.h>
#include <queue>
#include <stack>
#include <bitset>
#include <sstream>
using namespace std;
 
#define pb push_back
#define f first
#define s second
#define endl '\n'
#define EPS 1e-9
#define PI acos(-1)
 
using ll = long long;
using pll = pair<ll,ll>;
using ii = pair<ll,ll>;
using iii = pair<pair<int,int>,int>;
using viii = vector<iii>;
using vi = vector<int>;
using vii = vector<ii>;
using vll = vector<ll>;
using ui = unsigned int;

bool cmp(pair<pair<string,string>,int> a,pair<pair<string,string>,int> b){
	return a.second< b.second;
}
string find_set(string a,map<string,string> &padre){
	return padre[a] = (padre[a] == a ? a:find_set(padre[a],padre));
}
void union_set(string a,string b,map<string,string>& padre){
	string p1 = find_set(a,padre);
	string p2 = find_set(b,padre);
	if(p1 != p2){
		padre[p1] = p2;
	}
}
int main() {
    ofstream out("output.txt");
    ios_base::sync_with_stdio(false);
	
	int t,cont=0;
	cin>>t;
	vector<pair<pair<string,string>,int>> aristas;
	while(t--){
		aristas.clear();
		int n,m;
		cin>>n>>m;
		string a,b;
		int c;
		set<string> s;
		for(int i =0;i<m;i++){
			cin>>a>>b>>c;
			s.insert(a);
			s.insert(b);
			aristas.push_back({{a,b},c});
		}
		sort(aristas.begin(),aristas.end(),cmp);
		map<string,string> padre;
		for(auto it = s.begin();it!=s.end();it++){
			padre[*it] = (*it);
		}
		/*for(auto it = padre.begin();it!=padre.end();it++){
			cout<<it->first<<" "<<it->second<<endl;
		}*/
		int costo = 0;
		pair<pair<string,string>,int> act;
		for(int i =0;i<m;i++){
			act = aristas[i];
			if(find_set(act.first.first,padre) != find_set(act.first.second,padre)){
				costo += act.second;
				union_set(act.first.first,act.first.second,padre);
			}
		}
		if(cont++>0) cout<<endl;
		cout<<costo<<endl;
	}
	
    return 0;
}   

