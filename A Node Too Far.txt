#include <cstdio>
#include<bits/stdc++.h> 
#define pb          push_back 
#define endl        "\n"
#define mostrar(x,y) cout<<x<<" "<<y<<endl;
using namespace std;
typedef pair<int,int> ii;
typedef vector<int> vi;

map<int,vi> grafo;
map<int,bool> visitado;
map<int,int> distancias;
//map<int,int> parents;

void bfs(int origen){
    queue<int> colita;
    colita.push(origen);
    int actual,vecino;
    distancias[origen] = 0;
    while(!colita.empty()){
        actual = colita.front(); colita.pop();
        if(visitado[actual]) continue;
        visitado[actual] = true;
        for(int i =0; i<grafo[actual].size(); i++){
            vecino = grafo[actual][i];
            if(!visitado[vecino]){
                colita.push(vecino);
                /*if(parents[vecino] == -1)
                    parents[vecino] = actual;*/
                if(distancias[vecino] == 1000000)
                    distancias[vecino] = distancias[actual]+1;
            }
        }
    }
}
int main()
{   
    ofstream out("output.txt");
    //ifstream in("input2.txt");

    int aristas,a,b,nodo,limite,cont = 1,unreachable;

    while(cin>>aristas && aristas!=0){
        while(aristas--){
            cin>>a>>b;
            grafo[a].push_back(b);
            grafo[b].push_back(a);
        }
        for(auto it = grafo.begin(); it!=grafo.end(); it++){
            visitado[it->first] = false;
            distancias[it->first] = 1000000;
            //parents[it->first] = -1;
        }
        while(cin>>nodo>>limite && (nodo != 0 || limite != 0)){
            unreachable = 0;
            if(grafo.find(nodo) == grafo.end()){
                cout<<"Case "<<cont<<": "<<grafo.size()<<" nodes not reachable from node "<<nodo<<" with TTL = "<<limite<<".\n";
            }
            else{
                bfs(nodo);
                for(auto it = distancias.begin(); it!=distancias.end(); it++){
                    if((it->second)>limite) unreachable++;
                }
                cout<<"Case "<<cont<<": "<<unreachable<<" nodes not reachable from node "<<nodo<<" with TTL = "<<limite<<".\n";
                for(auto it = grafo.begin(); it!=grafo.end(); it++){
                    visitado[it->first] = false;
                    distancias[it->first] = 1000000;
                }
            }   
            cont++;
        }
        grafo.clear();
        distancias.clear(); 
        visitado.clear();
    }
    

    return 0;
}

