#include <cstdio>
#include<bits/stdc++.h> 
using namespace std;

unordered_map<int,vector<pair<int,int>>> grafo;
unordered_map<int,int> distancias;

void dijkstra(int origen){
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> colita;
    distancias[origen] = 0;
    colita.push ({origen,0});
    while(!colita.empty()){
        pair<int,int> actual = colita.top(); colita.pop();
        int costoAcumulado = actual.second;
        int vActual = actual.first;

        if(costoAcumulado > distancias[vActual]) continue;

        for(auto vecino : grafo[vActual]){
            if(distancias[vActual] + vecino.second < distancias[vecino.first] ){
                distancias[vecino.first] = distancias[vActual]+vecino.second;
                colita.push({vecino.first,distancias[vecino.first]});
            }
        }
    }
}

int main()
{   
    ofstream out("output.txt");
    //ifstream in("input2.txt");

    int N,n,m,S,T,a,b,costo,cont = 1;
    cin>>N;

    while(N--){
        cin>>n>>m>>S>>T;
        while(m--){
            cin>>a>>b>>costo;
            grafo[a].push_back(make_pair(b,costo));
            grafo[b].push_back(make_pair(a,costo));
        }
        for(int i = 0; i<n; i++){
            distancias[i] = 10000000;
        }
        dijkstra(S);

        if(distancias[T] == 10000000){
            cout<<"Case #"<<cont<<": unreachable\n";
        }
        else{
            cout<<"Case #"<<cont<<": "<<distancias[T]<<endl;
        }

        grafo.clear();
        distancias.clear();
        cont++;
    }

    return 0;
}

