#include<bits/stdc++.h>
#define llenar(a,val)   memset(a,val,sizeof(a))
#define pb          push_back 
#define endl        "\n"
#define mostrar(x,y) cout<<x<<" "<<y<<endl;
#define f           first
#define s           second
#define mod         1000000007
#define EPS         1e-9
using namespace std;
typedef pair<int,int> ii;
typedef pair<pair<int,int>,int> iii;
typedef vector<int> vi;
typedef vector<pair<int,int>> vii;
typedef long long ll;
typedef vector< pair<pair<int,int>,int> > viii;

map<char,vector<char>> grafo;

string permutar(string &p){
    string sgte = p;
    int l = p.size();
    int x = l-2;
    while(x>=0&&p[x]>=p[x+1]){
        x--;
    }
    if(x == -1) return sgte;
    else{
        int y = l-1;
        while(p[x]>=p[y]){
            y--;
        }
        char aux = sgte[x];
        sgte[x] = sgte[y];
        sgte[y] = aux;
        reverse(sgte.begin()+x+1,sgte.end());
        return sgte;
    }
}
int indexOf(char a, string &s){
    for(int i =0;i<s.size();i++){
        if(s[i] == a) return i;
    }
}
int bandwidth(string &nodos){
    int maximo =0;
    char x,y;
    for(int i =0;i<nodos.size();i++){
        int maximoUnico = 0;
        x = nodos[i];
        for(int j=0;j<grafo[x].size();j++){
            y = grafo[x][j];
            maximoUnico = max(maximoUnico, abs(indexOf(x,nodos)-indexOf(y,nodos))  );
        }
        maximo = max(maximo,maximoUnico);
    }
    return maximo;
}

int main(){
    ofstream out("output.txt");
    
    string datos;
    while(getline(cin,datos)&&datos!="#"){
        bool vertice = true;
        char a,b; 
        string nodos = "",aux,mejor;
        int minimo = 1000000, x,y;
        for(int i =0;i<datos.size();i++){
            if(datos[i] ==':')      vertice = false;
            else if(datos[i] ==';') vertice = true;
            else if(vertice){
                a = datos[i];
            }
            else if(!vertice){
                grafo[a].pb(datos[i]);
                grafo[datos[i]].pb(a);
            }
        }
        for(auto it = grafo.begin();it!=grafo.end();it++){
            nodos += (it->f);
            /*cout<<it->f<<" ";
            for(int i = 0;i<(it->s).size();i++){
                cout<<(it->s)[i]<<" ";
            }
            cout<<endl;*/
        }
        x = bandwidth(nodos);
        if(x<minimo){
            mejor = nodos;
            minimo = x;
        }
        while(true){
            aux = permutar(nodos);
            if(aux == nodos) break;
            nodos = aux;
            x = bandwidth(nodos);
            if(x<minimo){
                mejor = nodos;
                minimo = x;
            }
        }
        for(int i =0;i<mejor.size();i++){
            cout<<mejor[i]<<" ";
        }
        cout<<"-> "<<minimo<<endl;

        grafo.clear();
    }

    
    return 0;
}

 
 





